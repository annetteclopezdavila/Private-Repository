# -*- coding: utf-8 -*-
"""DNN_models_failed.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b0-hnHkCRoBKwaSVpJRIkurxmXhrFxUL
"""

from google.colab import drive
drive.mount('/content/gdrive')

import tensorflow as tf
import numpy as np
import glob
import re
from PIL import Image
from tensorflow.keras.optimizers import RMSprop

train_files = glob.glob('/content/gdrive/My Drive/train_data2/*.jpeg')
train_files

train_files.sort(key=lambda f: int(re.sub('\D', '', f)))
train_imgs = np.array([np.array(Image.open(fname)) for fname in train_files])

labels = np.genfromtxt('/content/gdrive/My Drive/labels.csv', delimiter=',')
train_labs = labels[1:101, 1]

test_files = glob.glob('/content/gdrive/My Drive/test_data2/*.jpeg')
test_files

test_files.sort(key=lambda f: int(re.sub('\D', '', f)))
test_imgs = np.array([np.array(Image.open(fname)) for fname in test_files])

test_labs = labels[101:131, 1]

train_imgs  = train_imgs / 255.0
test_imgs = test_imgs / 255.0

---------------
#FIRST ATTEMPT 
---------------
#model = tf.keras.models.Sequential([
 # tf.keras.layers.Flatten(),
  #tf.keras.layers.Dense(128, activation=tf.nn.relu),
  #tf.keras.layers.Dense(10, activation=tf.nn.softmax),
  #tf.keras.layers.add_command_here(x)
#])
---------------
#SECOND ATTEMPT
---------------
#model = tf.keras.models.Sequential([
 # tf.keras.layers.Flatten(),
  #tf.keras.layers.Dense(256, activation=tf.nn.relu),
  #tf.keras.layers.Dense(128, activation=tf.nn.softmax),
  #tf.keras.layers.Dense(1)
#])
---------------
#THIRD ATTEMPT of DNN SAVED IN DIFFERENT FILE

----------------
#FIRST ATTEMPT
----------------
#model.compile(optimizer = tf.keras.optimizers.Adam(),
              #loss = 'sparse_categorical_crossentropy',
              #metrics=['accuracy'])
----------------
#SECOND ATTEMPT
----------------
# secon attempt model.compile(optimizer = tf.keras.optimizers.Adam(),
            #  loss = 'binary_crossentropy',
             # metrics=['accuracy'])
----------------
#THIRD ATTEMPT
----------------
optimizer = tf.keras.optimizers.RMSprop(0.001)
model.compile(optimizer = optimizer,
              loss = 'mse',
              metrics=['mse', 'mae'])

--------------
#FIRST ATTEMPT
--------------
#model.fit(train_imgs, train_labs, epochs=5)
--------------
#SECOND ATTEMPT
--------------
#second   model.fit(train_imgs, train_labs, epochs=5, steps_per_epoch = 10, batch_size = 5)
--------------

